buildscript {
    ext {
        springBootVersion = "1.3.5.BUILD-SNAPSHOT"
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.7.RELEASE")
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

ext {
    jUnitVersion = "4.12"
    lombokVersion = "1.16.6"
    httpClientVersion = "4.5.1"
}

// Override the spring-data-releasetrain.version property
ext['spring-data-releasetrain.version'] = 'Gosling-RELEASE'

// all subprojects
subprojects {
    apply plugin: 'java'
	apply plugin: 'idea'
    apply plugin: 'spring-boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven'
    apply plugin: 'application'
    apply plugin: 'docker'

    springBoot {
        requiresUnpack = ['com.netflix.eureka:eureka-core','com.netflix.eureka:eureka-client']
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-starter-parent:Brixton.SR1'
        }
    }

    group = 'microservices4vaadin'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        //compile("org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}")
        //compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")

        compile("org.springframework.cloud:spring-cloud-starter-eureka")

        //compile("org.apache.httpcomponents:httpclient:${httpClientVersion}")

        compile "org.projectlombok:lombok:${lombokVersion}"
        compile("com.google.guava:guava:18.0")
        compile("com.jayway.jsonpath:json-path")

        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("junit:junit:${jUnitVersion}")
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

    // START: integration test with gradle
    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        reports.html.destination = new File(reporting.baseDir,'integrationTests')
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
    // END: integration test with gradle

    def DOCKER_REPO = "klhauser"
    task buildDocker(type: Docker) {
        tagVersion = 'latest'
        tag = DOCKER_REPO + "/microservice4vaadin-" + jar.baseName.replace('microservices/','')
        push = project.hasProperty('push')
        addFile {
            from jar
            rename {'app.jar'}
        }
        entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
